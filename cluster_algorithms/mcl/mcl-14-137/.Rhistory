genesetf_data = do.call(rbind, genesetf)
genesetf_data=genesetf_data[,c(2,1,3)]
geneset_data=geneset_data[,c(2,1,3)]
write.table(x=geneset_data,"/scratch/miguecas/BinoClus/data/no_overlap/truefakeclus.tsv",sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
# #
# #
# #
write.table(x=genesetf_data,"/scratch/miguecas/BinoClus/data/no_overlap/falsefakeclus.tsv",sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
head(genesetf_data)
head(geneset_data)
pathnum <- rep(3,80)
paths_eachgroupf=list()
kegg_keggf=list()
genesetf=list()
pathfilter=unique(c(paththresh0$pathway1,paththresh0$pathway2))
paths=paththresh0[,c(1,2)]
paths_sample=pathfilter
# load("/scratch/miguecas/BinoClus/beginning/clustering_paths/genesets_paths_binoxweights.RData")
# paths_sample= as.vector(names(genesets)[positions])
kegg_kegg=list()
paths_eachgroup=list()
geneset <-list()
i=1
w=1
j=1
c=1
x=1
length(paths_sample)
for(i in 1:length(pathnum)){
if(pathnum[i]==1 ){
unique_paths=sample(paths_sample,pathnum[i],replace = F)
}else{
chosen_paths=sample(paths_sample,pathnum[i],replace = F)
# unique_paths=unique_paths[!(unique_paths%in%chosen_paths)]#Remove from the list the pathways used already
number_comb=factorial(pathnum[i])/(factorial(pathnum[i]-2)*factorial(2))
combinations = data.frame(matrix(vector(), number_comb, 2,
dimnames=list(c(), c("pathway1", "pathway2"))),
stringsAsFactors=F)
matches <- data.frame(pathway1=character(),
pathway2=character(),
stringsAsFactors=FALSE)
eliminated <- data.frame(pathway1=character(),
stringsAsFactors=FALSE)
# length=0
while(length(unique(chosen_paths))<pathnum[i] ){
npaths=length(unique(chosen_paths))
extra=sample(paths_sample,pathnum[i]-npaths,replace = F)
chosen_paths=c(unique(chosen_paths),extra)
}
while(length(unique(chosen_paths))<pathnum[i] | nrow(matches)<number_comb){
unique_paths=unique(chosen_paths)
while(length(unique_paths)<pathnum[i] ){
npaths=length(unique_paths)
extra=sample(paths_sample,pathnum[i]-npaths,replace = F)
unique_paths=c(unique_paths,extra)
}
combinations=as.data.frame(t(combn(unique_paths,2)))
names(combinations)=c("pathway1","pathway2")
change=paths[,c(2,1)]
names(change)=c("pathway1","pathway2")
pathss1=rbind(paths,change)
matches=match_df(combinations, pathss1)
a=as.vector(t(matches))
missing=subset(unique_paths,!(unique_paths%in%a))
a=c(a,missing)
a=table(a)
r=1
for(r in 1:length(a)){
if(names(a[r])%in%missing==TRUE){
a[[r]]=0
}
}
# Now we have the pairwise matches that we could find with the combination of the chosen pathways. However, sometimes will happen
# that all the combinations are not present, the bigger the size of random pathways the more probable that this will happen.
# Now we have to choose new pathways that match the requisites.
unique_paths1=unique(unique_paths)
count=1
for(k in 1:length(unique_paths1)){
if(unique_paths[k]%!in%names(a)==TRUE | a[[k]]<(length(unique_paths1)-1)){
eliminated[count,]=unique_paths[k]
count=count+1
}
}
unique_paths1=subset(unique_paths1,!(unique_paths1%in%eliminated$pathway1)) #Eliminate the pathway
paths_sample=subset(paths_sample,(paths_sample%!in%eliminated))
extra=unique(sample(paths_sample,count-1,replace = F))
count=1
chosen_paths=c(extra,unique_paths1)
}
}
OK=subset(indep,(indep$pathway%in%chosen_paths))
names(OK)=c("V2","V1")
OK1=OK[order(OK$V2),]
# OK1$V2=paste("geneset",w,"\t",OK1$V2)
OK1$V3=paste(OK1$V2)
OK1$V2=paste("geneset",w)
# c instead of i because when we are jumping an iteration we dont want to jump from i to i+2 in our dataset.
geneset[[c]]=OK1
# genesetf[[x]]=OKf
geneset_data = do.call(rbind, geneset)
# genesetf_data = do.call(rbind, genesetf)
hola=net[net$V1 %in% OK$V1 & net$V2 %in% OK$V1,1:3 ]
geneset_datal=OK
geneset_datalf=OK
p=1
valor=c(1)
for(p in 1:length(geneset_datal$V1)){
gene=geneset_datal[p,2]
degree=subset(degreeList$Freq,degreeList$Var1==gene)
cgenes=as.vector(subset(degreeList$Var1,degreeList$Freq==degree))
grupos=KEGGc[which(KEGGc$V2%in%chosen_paths),]
chosengenes=cgenes[which(cgenes%!in%grupos$V1)]
chosengenes=chosengenes[which(chosengenes%!in%hola$V1 & chosengenes%!in%hola$V2)]
chosengenes=subset(chosengenes,chosengenes%!in%norep_genes)
if (length(chosengenes)==0){
degree1=degree+degree*0.05
degree2=degree-degree*0.05
cgenes=subset(degreeList$Var1,degreeList$Freq>=degree2 & degreeList$Freq<=degree1)
grupos=KEGG[which(KEGG$V2%in%chosen_paths),]
chosengenes=cgenes[which(cgenes%!in%grupos)]
chosengenes=chosengenes[which(chosengenes%!in%hola$V1 & chosengenes%!in%hola$V2)]
# chosengenes=subset(chosengenes,chosengenes%!in%gene)
chosengenes=subset(chosengenes,chosengenes%!in%norep_genes)
}
if(length(chosengenes)==0){
chosengenes=get_random_string()
}
gene=as.vector(sample(chosengenes, 1))
norep_genes[p]=gene
geneset_datalf[p,2]=gene
p=p+1
}
OKf=geneset_datalf
names(OKf)=c("V2","V1")
OK1f=OKf[order(OKf$V2),]
# OK1$V2=paste("geneset",w,"\t",OK1$V2)
OK1f$V3=paste(OK1f$V2)
OK1f$V2=paste("geneset",w)
# c instead of i because when we are jumping an iteration we dont want to jump from i to i+2 in our dataset.
genesetf[[c]]=OK1f
# genesetf[[x]]=OKf
genesetf_data = do.call(rbind, genesetf)
#For false positives
# OKf=subset(falseall,(falseall$V2%in%chosen_paths))
# OKf$V2=paste("geneset",w,"\t",OKf$V2)
# OKf$V3=paste(OKf$V2)
# OKf$V2=paste("geneset",w)
# genesetf[[x]]=OKf
# genesetf_data = do.call(rbind, genesetf)
#
w=w+1
holaf=net[net$V1 %in% OKf$V1 & net$V2 %in% OKf$V1,1:3 ]
e=1
#TO put to what pathway does that link belong
if(nrow(hola)>0){
for(e in 1:length(hola$V1)){
pathwayhola=OK$V2[hola$V1[e]==OK$V1]
# hola$V3[e]=paste("geneset",i," ",pathwayhola)
hola$V4[e]=pathwayhola
}
}
hola <- hola[order(hola$V4),]
paths_eachgroup[[c]]=chosen_paths
kegg_kegg[[x]]=hola
c=c+1
e=1
#TO put to what pathway does that link belong
if(nrow(holaf)>0){
for(e in 1:length(holaf$V1)){
pathwayholaf=OKf$V2[holaf$V1[e]==OKf$V1]
holaf$V4[e]=pathwayholaf
}
}
if(nrow(holaf)>0){
holaf <- holaf[order(holaf$V4),]
}
paths_eachgroupf[[x]]=chosen_paths
kegg_keggf[[x]]=holaf
x=x+1
# if(i==6){
#   break
# }
i=i+1
}
j=1
nombres=vector()
for(j in 1:length(kegg_kegg)){
nombres[j]=paste(paths_eachgroup[[j]] , collapse ="/")
nombres[j]=paste("geneset","\t",j," ",nombres[j])
}
names(kegg_kegg)=nombres
geneset_data1=geneset_data
names(kegg_keggf)=nombres
genesetf_data1=genesetf_data
geneset2=geneset
for(i in 1:length(geneset)){
geneset2[[i]]$pathway=rep(nombres[i],length(geneset[[i]]$V2))
}
geneset_data2 = do.call(rbind, geneset2)
head(geneset_data2)
geneset_data2=geneset_data2[,c(2,1,3)]
names(geneset_data2)=c("V1","V2","V3")
head(geneset_data2)
write.table(x=geneset_data2,"/scratch/miguecas/BinoClus/data/no_overlap/noclustering_true.tsv",sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
save(kegg_kegg, file="/scratch/miguecas/BinoClus/data/no_overlap/clustering_true.RData")
geneset2f=genesetf
for(i in 1:length(genesetf)){
geneset2f[[i]]$pathway=rep(nombres[i],length(genesetf[[i]]$V2))
}
genesetf_data2 = do.call(rbind, geneset2f)
head(genesetf_data2)
genesetf_data2=genesetf_data2[,c(2,1,3)]
names(genesetf_data2)=c("V1","V2","V3")
head(genesetf_data2)
write.table(x=genesetf_data2,"/scratch/miguecas/BinoClus/data/no_overlap/noclustering_false.tsv",sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
save(kegg_keggf, file="/scratch/miguecas/BinoClus/data/no_overlap/clustering_false.RData")
geneset_data = do.call(rbind, geneset)
genesetf_data = do.call(rbind, genesetf)
genesetf_data=genesetf_data[,c(2,1,3)]
geneset_data=geneset_data[,c(2,1,3)]
write.table(x=geneset_data,"/scratch/miguecas/BinoClus/data/no_overlap/truefakeclus.tsv",sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
# #
# #
# #
write.table(x=genesetf_data,"/scratch/miguecas/BinoClus/data/no_overlap/falsefakeclus.tsv",sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
trueclus=read.delim("/scratch/miguecas/BinoClus/data/no_overlap/truefakeclus.tsv",header=T)
head(trueclus)
trueclus[,2]=substring(trueclus[,2],9)
trueclus[,2]=as.numeric(trueclus[,2])
head(trueclus)
write.table(trueclus,"/scratch/miguecas/BinoClus/data/no_overlap/cleantruefakeclus.tsv",sep="\t",col.names=TRUE,row.names=FALSE,quote=FALSE)
trueclus=read.delim("/scratch/miguecas/BinoClus/data/no_overlap/cleantruefakeclus.tsv",header=T)
# trueclus = trueclus[,c(3,2,1)]
filtered_net <- humannet[GeneA%in%trueclus[,1] & GeneB%in%trueclus[,1]]
dim(filtered_net)
filtered_net_random <- filtered_net[originalLink == 1]
dim(filtered_net_random)
#observed_net=fread("/scratch/miguecas/PathwAX2/data2/7617155/7617171/FC4.0_H.sapiens_compact")
real_net=fread("/afs/pdc.kth.se/home/m/miguecas/Desktop/fc3.tsv")
#observed_net=observed_net[,c(3,4,1)]
real_net=real_net[,c(1,2,3)]
names(real_net)=c("GeneA","GeneB","pfcScore")
real_net=real_net[which(real_net$pfcScore>=0.75),]
head(real_net)
filtered_real_net <- real_net[GeneA%in%trueclus[,1] & GeneB%in%trueclus[,1]]
dim(filtered_real_net)
names(filtered_net_random)=c("GeneA","GeneB","weight","originalLink","pfcScore")
mirar=vector()
genesets=list()
i=1
c=1
for(i in 1:length(unique(trueclus[,2]))){
genes = as.vector(trueclus[which(trueclus[,2]==i),1])
links_random = filtered_net_random[GeneA%in%genes & GeneB%in%genes]
links_real = filtered_real_net[GeneA%in%genes & GeneB%in%genes]
links_random[,3]=1-(links_random[,3]/150)
links_random[,4]=rep(i,nrow(links_real))
links_random=as.data.frame(links_random)
genesets[[i]]=links_random[,c(1:4)]
if(nrow(links_random)<nrow(links_real)){
mirar[c]=i
c=c+1
}
}
i=1
for(i in 1:length(genesets)){
paths = unique(as.vector(trueclus[which(trueclus[,2]==i),3]))
}
i=1
for(i in 1:length(genesets)){
colnames(genesets[[i]])=c("GeneA","GeneB","weight","group")
}
j=1
nombres=vector()
for(j in 1:length(genesets)){
paths = unique(as.vector(trueclus[which(trueclus[,2] == j),3]))
nombres[j] = paste(paths, collapse ="/")
nombres[j]=paste("geneset",j," ",nombres[j])
}
names(genesets)=nombres
save(genesets,file="/scratch/miguecas/BinoClus/data/no_overlap/genesets_binoxweights.RData")
# Module were each of the genes belong in the different genesets
i = 1
mods_list = list()
data1 = data.frame()
for(i in 1: length(unique(modules$V3))){
modules1 = modules[which(modules$V3 == i),]
mods = substring(modules1$module,2,6)
mods = rm_between(mods, "_", "_", extract=TRUE)
mods = as.numeric(unlist(mods))
genes = as.vector(modules1$gene)
data1[c(1:length(genes)),1] = genes
data1[c(1:length(mods)),2] = mods
# # Merge the graph_data and data1 so that we can have the order of the modules in the same order as the output of igraph
# prueba = merge(graph_data[[i]],data1,by="V1")
mods_list[[i]] = data1
data1 = data.frame()
}
# KEGG1=KEGG
KEGG=KEGG1
i = 1
all_genesetd = list()
graph_data = list()
for(i in 1:length(kegg_kegg)){
genesetd = graph_from_data_frame(kegg_kegg[[i]][1:2], directed = FALSE, vertices = NULL)
all_genesetd[[i]] = genesetd
# Extract pathways from that geneset
paths = unique(kegg_kegg[[i]][[4]])
# Extract degree of the nodes in this geneset
genes = as.vector(unique(unlist(kegg_kegg[[i]][1:2])))
degree = data.frame()
j = 1
path = vector()
for ( j in 1:length(unique(as.vector(unlist(kegg_kegg[[i]][1:2]))))){
#Degree of each gene within the geneset
degree[j,1] = genes[j]
degree[j,2] = nrow(kegg_kegg[[i]][which(kegg_kegg[[i]][[1]]%in%genes[j] | kegg_kegg[[i]][[2]]%in%genes[j]),])
# Pathway where that gene belongs, since we do not have gene overlap between pathways, their label will be unique
genes_in_path = KEGG[which(KEGG$V2%in%paths),]
path[j] = genes_in_path[which(genes_in_path$V1%in%genes[j]),2]
# Specify a level to make the colors available for plotting it
degree[j,3] = path[j]
# Extract the module where the gene belongs (MGclus)
dato = mods_list[[i]][[2]][which(mods_list[[i]][[1]]%in%genes[j])]
if(length(dato)==0){
dato = length(unique(mods_list[[i]][[2]])) + 1
degree[j,4] = dato
}else{degree[j,4] = dato}
}
# Now label the pathways with numeric factors to be able to plot them
levels(path) <- unique(path)
path_num <- as.character(1:length(unique(path)))[ match(path, c(unique(path)) ) ]
degree[,5] = as.numeric(path_num)
graph_data[[i]] = degree
}
prueba11 = kegg_kegg[[1]]
prueba11 = kegg_kegg[[1]]
# CLuster them by modularity
# Labels are the pathway to where they really belong
# The colors are the clusters doing the fastgreedy
gg.com <- fastgreedy.community(all_genesetd[[1]])
V(all_genesetd[[1]])$color <- gg.com$membership + 1
plot(all_genesetd[[1]],vertex.label = graph_data[[1]][[5]], vertex.size = 3, margin=-0.20,edge.arrow.size=20)
save.image("/scratch/singularity_example_receipts/mem_bino.RData")
# CLuster them by modularity
# Labels are the pathway to where they really belong
# The colors are the clusters doing the fastgreedy
gg.com <- fastgreedy.community(all_genesetd[[1]])
V(all_genesetd[[1]])$color <- gg.com$membership + 1
plot(all_genesetd[[1]],vertex.label = graph_data[[1]][[5]], vertex.size = 3, margin=-0.20,edge.arrow.size=20)
# CLuster them by modularity
# Labels are the pathway to where they really belong
# The colors are the modules where they belong doing MGClus
x = 2
gg.com <- fastgreedy.community(all_genesetd[[x]])
V(all_genesetd[[x]])$color <- graph_data[[x]][[4]] + 1
library(RColorBrewer)
n <- length(unique(V(all_genesetd[[x]])$color))
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
pie(rep(1,n), col=sample(col_vector, n))
membership <- graph_data[[x]][[4]]
new_cols <- c(col_vector)[membership]
pdf(file="/afs/pdc.kth.se/home/m/miguecas/Desktop/genesets_plot/geneset1.pdf",width=11,height=8)
plot(all_genesetd[[x]],vertex.color=new_cols,vertex.label = graph_data[[x]][[5]],vertex.frame.color="black",vertex.label.cex = 0.7, vertex.size = 4, margin=-0.05,edge.arrow.size=20)
dev.off()
modularity(all_genesetd[[x]],membership)
# CLuster them by modularity
# Labels are the pathway to where they really belong
# The colors are the clusters doing the fastgreedy
gg.com <- fastgreedy.community(all_genesetd[[2]])
V(all_genesetd[[2]])$color <- gg.com$membership + 1
plot(all_genesetd[[2]],vertex.label = graph_data[[2]][[5]], vertex.size = 3, margin=-0.20,edge.arrow.size=20)
load("/scratch/miguecas/BinoClus/data/no_overlap/genesets_binoxweights.RData")
load("/scratch/miguecas/BinoClus/data/no_overlap/genesets_binoxweights.RData")
load("/scratch/miguecas/BinoClus/data/no_overlap/clustering_true.RData")
kegg_kegg=genesets
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /afs/pdc.kth.se/home/m/miguecas/Desktop/mierda/onekeggcluster  ",sep=""))
# Read in the data
x <- scan("/afs/pdc.kth.se/home/m/miguecas/Desktop/mierda/onekeggcluster", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
input_dir
input_dir = "/scratch/miguecas/mierda/"
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /afs/pdc.kth.se/home/m/miguecas/Desktop/mierda/onekeggcluster  ",sep=""))
# Read in the data
x <- scan("/afs/pdc.kth.se/home/m/miguecas/Desktop/mierda/onekeggcluster", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /scratch/mierda/onekeggcluster  ",sep=""))
# Read in the data
x <- scan("/afs/pdc.kth.se/home/m/miguecas/Desktop/mierda/onekeggcluster", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /scratch/mierda/onekeggcluster  ",sep=""))
# Read in the data
x <- scan("/afs/pdc.kth.se/home/m/miguecas/Desktop/mierda/onekeggcluster", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /scratch/mierda/onekeggcluster  ",sep=""))
# Read in the data
x <- scan("/afs/pdc.kth.se/home/m/miguecas/Desktop/mierda/onekeggcluster", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /scratch/mierda/onekeggcluster  ",sep=""))
# Read in the data
x <- scan("/afs/pdc.kth.se/home/m/miguecas/Desktop/mierda/onekeggcluster", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
paste(input_dir,"onekegg.tsv",sep="")
i=1
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
input_dir = "/scratch/singularity_example_receipts/rstudio-container/scratch/"
i=1
keggclusters=list()
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
input_dir = "/scratch/miguecas/mierda/"
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /scratch/mierda/onekeggcluster  ",sep=""))
paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /scratch/mierda/onekeggcluster  ",sep="")
input_dir = "/scratch/"
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
input_dir = "/scratch/miguecas/mierda/"
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /scratch/mierda/onekeggcluster  ",sep=""))
paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /scratch/mierda/onekeggcluster  ",sep="")
save.image("/scratch/singularity_example_receipts/mem_bino.RData")
library(biomaRt)
biocLite("biomaRt")
source("http://bioconductor.org/biocLite.R")
biocLite("biomaRt")
warnings()
biocLite("biomaRt")
library(biomaRt)
getwd()
setwd("/afs/pdc.kth.se/home/m/miguecas/R/x86_64-pc-linux-gnu-library/3.4")
library(biomaRt)
library(curl)
library(xml)
library(curl)
libPaths()
.libPaths()
biocLite("biomaRt")
library(biomaRt)
library(biomaRt)
.libPaths()
help(Startup)
p_unlock(lib.loc = "/afs/pdc.kth.se/home/m/miguecas/R/x86_64-pc-linux-gnu-library/3.4")
p_unlock()
setwd("/scratch/miguecas/Desktop/Clustering/mcl/mcl-14-137/")
biocLite("biomaRt")
install.packages("XML")
library(XML)
install.packages("XML", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("RCurl", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
library(RCurl)
library(RCurl)
install.packages("/afs/pdc.kth.se/home/m/miguecas/Downloads/RCurl_1.95-4.10.tar.gz", repos = NULL, type="source")
biocLite("biomaRt")
