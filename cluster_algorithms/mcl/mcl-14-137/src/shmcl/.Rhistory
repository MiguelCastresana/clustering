prueba1 = parSapply(cl,length_genesets, function(x) lapply(1:times,function(y) samples(x)))
# prueba2 = lapply(prueba1, function(x){as.numeric(unlist(x))})
load("~/Desktop/new_model_binox/data_h0model/output1_final")
library(data.table)
outputdt = setDT(output1)
stopCluster(cl)
no_cores <- detectCores() - 2
cl <- makeCluster(no_cores)
clusterEvalQ(cl, library(stringi))
clusterEvalQ(cl, library(future))
clusterEvalQ(cl, library(magrittr))
clusterEvalQ(cl, library(fastmatch))
genesets = total_groups
# Convert to a list
genesets <- split( genesets , f = genesets[,2])
length_genesets = as.numeric(sapply(genesets, function(x) nrow(x)))
length_genesets_all = rep(length_genesets,length(length_genesetB))
times = 2000
clusterExport(cl, list("samples","nbgenes","genes_not_in_net","times"),envir=environment())
# prueba1 = parLapply(cl,1:times, function(x) samples(x))
# prueba1 = parSapply(cl,data, function(x) lapply(1:times,function(y) samples(x,y)))
prueba1 = parSapply(cl,length_genesets, function(x) lapply(1:times,function(y) samples(x)))
genesall = unique(c(as.vector(net[,1]),as.vector(net[,2])))
genes_not_in_net = genesall[which(genesall%!in%index_genes)]
genes_genome = c(index_genes,genes_not_in_net)
nbgenes = 1:length(genes_genome)
nbgenes
start_time = Sys.time()
i = 1
sets = 5
total_groups = data.frame()
for(i in 1:sets){
g = sample(1:length(nbgenes), 110, replace = F)
v = rep(i,110)
random_groups = as.data.frame(cbind(g,v))
total_groups = rbind(total_groups,random_groups)
}
total_groups
dat_length
samples = function(dat_length){
g = sample(1:nbgenes, 110,replace = F)
g = g[which(g<=(nbgenes-length(genes_not_in_net)))]
return(g)
}
no_cores <- detectCores() - 2
cl <- makeCluster(no_cores)
clusterEvalQ(cl, library(stringi))
clusterEvalQ(cl, library(future))
clusterEvalQ(cl, library(magrittr))
clusterEvalQ(cl, library(fastmatch))
genesets = total_groups
# Convert to a list
genesets <- split( genesets , f = genesets[,2])
length_genesets = as.numeric(sapply(genesets, function(x) nrow(x)))
length_genesets_all = rep(length_genesets,length(length_genesetB))
times = 2000
clusterExport(cl, list("samples","nbgenes","genes_not_in_net","times"),envir=environment())
# prueba1 = parLapply(cl,1:times, function(x) samples(x))
# prueba1 = parSapply(cl,data, function(x) lapply(1:times,function(y) samples(x,y)))
prueba1 = parSapply(cl,length_genesets, function(x) lapply(1:times,function(y) samples(x)))
1:nbgenes
samples = function(dat_length){
g = sample(1:length(nbgenes), 110,replace = F)
g = g[which(g<=(length(nbgenes)-length(genes_not_in_net)))]
return(g)
}
clusterExport(cl, list("samples","nbgenes","genes_not_in_net","times"),envir=environment())
prueba1 = parSapply(cl,length_genesets, function(x) lapply(1:times,function(y) samples(x)))
genesets = total_groups
View(genesets)
clusterExport(cl, list("links_geneset","output1"),envir=environment())
query = parLapply(cl,prueba1, function(x) links_geneset(x))
genesets = total_groups
View(genesets)
i = 1
query_list = list()
for(i in 1:length(unique(genesets[,2]))){
g = as.vector(genesets[which(genesets[,2]==i),1])
g = g[which(g<=(length(nbgenes)-length(genes_not_in_net)))]
query_list[[i]] = g
}
unique(genesets[,2])
?read_delim
library(tidyverse)
query_list
library(mygene)
load("/scratch/beta_binomial/runs/allpaths_10000genesets_size110_2k_GOOD_all")
a = as.vector(unlist(pvalue_list))
p = rep(paths,10000)
gg = rep(c(1:10000),each = 288)
bbx = as.data.frame(cbind(gg,p,a))
bbx[,4] = p.adjust(bbx[,3],method="BH")
View(bbx)
0.95^10
load("/scratch/new_model_binox/data_creation/clustering_false68.RData")
kegg_keggf[1]
load("/scratch/new_model_binox/data_creation/clustering_true30.RData")
input_dir = "/scratch/miguecas/mierda/"
mcl_dir="/scratch/miguecas/Desktop/Clustering/mcl/mcl-14-137/"
kegg_kegg=kegg_keggf
keggclusters=list()
j=1
setwd(paste(mcl_dir,"src/shmcl",sep=""))
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("./mcl ",input_dir,"onekegg.tsv --abc -o /scratch/miguecas/mierda/onekeggcluster.mcl",sep=""))
# Read in the data
x <- scan("/scratch/miguecas/mierda/onekeggcluster.mcl", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
#Naming each list in the list of pathways
names(keggclusters)=names(kegg_kegg)
#Each pathway module number
groups=vector()
for (i in 1:length(keggclusters)){
nb=length(keggclusters[[i]])
groups[i]=nb
}
modules1=data.frame(matrix(NA,nrow=length(unlist(keggclusters)),ncol=2))
modules1=data.frame(matrix(NA,nrow=0,ncol=2))
names(modules1)=c("gene","module")
w=1
for(i in 1:length(kegg_kegg)){
if(groups[i]==0){
i=i+0
}
else{
for(k in 1:groups[i]){
mod=unlist(keggclusters[[i]][k])
mod=as.data.frame(mod)
n=nrow(mod)
mod1=data.frame(matrix(NA,nrow=n,ncol=2))
names(mod1)<-c("gene","module")
mod1[,1]=mod
nombre = names(kegg_kegg[i])
nombre = gsub('([[:punct:]])|\\s+','_',nombre)
nombre = gsub("[[:blank:]]", "", nombre)
pathgroup=rep(paste("g_",w,"_#",nombre,sep=""),n)
pathgroup=trimws(pathgroup, which = "left")
# pathgroup <- gsub('([[:punct:]])|\\s+','_',pathgroup)
pathgroup <- sapply(pathgroup, toupper)
w=w+1
pathgroup=as.data.frame(pathgroup)
mod1[,2]=pathgroup
modules1=rbind(modules1,mod1)
}
}
w=1
}
View(modules1)
kegg_kegg=kegg_kegg
genesets1=genesets
i=1
for(i in 1:length(kegg_kegg)){
genesets1[[i]][3]=rep(1, nrow(genesets1[[i]][3]))
# genesets1[[i]][[3]][1:(length(genesets1[[i]][[3]])/2)] = rep(1, length(genesets1[[i]][[3]])/2)
# genesets1[[i]][[3]][((length(genesets1[[i]][[3]])/2)+1):length(genesets1[[i]][[3]])] = rep(0, (length(genesets1[[i]][[3]])-length(genesets1[[i]][[3]])/2))
}
length(kegg_kegg)
kegg_kegg=kegg_kegg
genesets1=genesets
i=1
for(i in 1:length(kegg_kegg)){
genesets1[[i]][3]=rep(1, nrow(kegg_kegg[[i]][3]))
# genesets1[[i]][[3]][1:(length(genesets1[[i]][[3]])/2)] = rep(1, length(genesets1[[i]][[3]])/2)
# genesets1[[i]][[3]][((length(genesets1[[i]][[3]])/2)+1):length(genesets1[[i]][[3]])] = rep(0, (length(genesets1[[i]][[3]])-length(genesets1[[i]][[3]])/2))
}
kegg_kegg=kegg_kegg
genesets1= kegg_kegg=
i=1
for(i in 1:length(kegg_kegg)){
genesets1[[i]][3]=rep(1, nrow(kegg_kegg[[i]][3]))
# genesets1[[i]][[3]][1:(length(genesets1[[i]][[3]])/2)] = rep(1, length(genesets1[[i]][[3]])/2)
# genesets1[[i]][[3]][((length(genesets1[[i]][[3]])/2)+1):length(genesets1[[i]][[3]])] = rep(0, (length(genesets1[[i]][[3]])-length(genesets1[[i]][[3]])/2))
}
kegg_kegg=genesets1
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /scratch/miguecas/mierda/onekeggcluster  ",sep=""))
# Read in the data
x <- scan("/scratch/miguecas/mierda/onekeggcluster", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
kegg_kegg=genesets1
keggclusters=list()
kegg_kegg=kegg_kegg
load("/scratch/new_model_binox/data_creation/clustering_true30.RData")
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /scratch/miguecas/mierda/onekeggcluster  ",sep=""))
# Read in the data
x <- scan("/scratch/miguecas/mierda/onekeggcluster", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
input_dir
load("/scratch/new_model_binox/data_creation/clustering_true30.RData")
kegg_kegg=kegg_kegg
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /scratch/miguecas/mierda/onekeggcluster  ",sep=""))
# Read in the data
x <- scan("/scratch/miguecas/mierda/onekeggcluster", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
#Naming each list in the list of pathways
names(keggclusters)=names(kegg_kegg)
#Each pathway module number
groups=vector()
for (i in 1:length(keggclusters)){
nb=length(keggclusters[[i]])
groups[i]=nb
}
length(kegg_kegg)
input_dir = "/scratch/HiPathway_Boo/"
kegg_kegg=kegg_kegg
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o /scratch/miguecas/mierda/onekeggcluster  ",sep=""))
# Read in the data
x <- scan("/scratch/miguecas/mierda/onekeggcluster", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
#Naming each list in the list of pathways
names(keggclusters)=names(kegg_kegg)
paste(input_dir,"group_clustered",sep = "")
paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o ",paste(input_dir,"group_clustered",sep = ""),sep="")
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o ",paste(input_dir,"group_clustered",sep = ""),sep=""))
# Read in the data
x <- scan("/scratch/miguecas/mierda/onekeggcluster", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o ",paste(input_dir,"group_clustered",sep = ""),sep=""))
# Read in the data
x <- scan(paste(input_dir,"group_clustered",sep = ""), what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
#Naming each list in the list of pathways
names(keggclusters)=names(kegg_kegg)
names(kegg_kegg)
keggclusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o ",paste(input_dir,"group_clustered",sep = ""),sep=""))
# Read in the data
x <- scan(paste(input_dir,"group_clustered",sep = ""), what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
keggclusters[[j]]=y
j=j+1
}
keggclusters[1]
list_clusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o ",paste(input_dir,"group_clustered",sep = ""),sep=""))
# Read in the data
x <- scan(paste(input_dir,"group_clustered",sep = ""), what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
list_clusters[[j]]=y
j=j+1
}
as.vector(unlist(kegg_kegg[[i]][3]))
class(as.vector(unlist(kegg_kegg[[i]][3])))
paste(input_dir,"mcl/mcl-14-137/",sep = "")
paste(input_dir,"mcl/mcl-14-137/",sep = "")
mcl_dir=paste(input_dir,"mcl/mcl-14-137/",sep = "")
list_clusters=list()
j=1
setwd(paste(mcl_dir,"src/shmcl",sep=""))
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("./mcl ",input_dir,"onekegg.tsv --abc -o /scratch/miguecas/mierda/onekeggcluster.mcl",sep=""))
# Read in the data
x <- scan("/scratch/miguecas/mierda/onekeggcluster.mcl", what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
list_clusters[[j]]=y
j=j+1
}
paste("./mcl ",input_dir,"onekegg.tsv --abc -o " paste(input_dir,"group_clustered",sep = ""),sep="")
paste("./mcl ",input_dir,"onekegg.tsv --abc -o ", paste(input_dir,"group_clustered",sep = ""),sep="")
paste(input_dir,"mcl/mcl-14-137/",sep = "")
mcl_dir=paste(input_dir,"mcl/mcl-14-137/",sep = "")
list_clusters=list()
j=1
setwd(paste(mcl_dir,"src/shmcl",sep=""))
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("./mcl ",input_dir,"onekegg.tsv --abc -o ", paste(input_dir,"group_clustered",sep = ""),sep=""))
# Read in the data
x <- scan(paste(input_dir,"group_clustered",sep = ""), what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
list_clusters[[j]]=y
j=j+1
}
i = 1
list_clusters=list()
j=1
for(i in 1:length(kegg_kegg)){
genesetd = graph_from_data_frame(kegg_kegg[[i]][1:2], directed = FALSE, vertices = NULL)
prueba = cluster_infomap(genesetd, e.weights = as.vector(unlist(kegg_kegg[[i]][3])))
# membership(prueba)
list_clusters[[j]] =  communities(prueba)
j = j + 1
}
library(igraph)
i = 1
list_clusters=list()
j=1
for(i in 1:length(kegg_kegg)){
genesetd = graph_from_data_frame(kegg_kegg[[i]][1:2], directed = FALSE, vertices = NULL)
prueba = cluster_infomap(genesetd, e.weights = as.vector(unlist(kegg_kegg[[i]][3])))
# membership(prueba)
list_clusters[[j]] =  communities(prueba)
j = j + 1
}
list_clusters[1]
load(paste(input_dir,"data_example.RData",sep = ""))
input_dir = "/scratch/HiPathway_Bo/"
load(paste(input_dir,"data_example.RData",sep = ""))
input_dir = "/scratch/HiPathway_Bo/"
load(paste(input_dir,"data_example.RData",sep = "")) # Data example file's name is "kegg_kegg"
######################################################################################################################
##############################################       MGClus         ##################################################
list_clusters=list()
j=1
for(i in 1:length(kegg_kegg)){
onekegg=kegg_kegg[[i]]
write.table(x=onekegg,paste(input_dir,"onekegg.tsv",sep=""),sep=" ",col.names=FALSE,row.names=FALSE,quote=FALSE)
system(paste("java -jar ",input_dir, "mgclusjar.jar  -f " ,input_dir, "onekegg.tsv -w T -o ",paste(input_dir,"group_clustered",sep = ""),sep=""))
# Read in the data
x <- scan(paste(input_dir,"group_clustered",sep = ""), what="", sep="\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
list_clusters[[j]]=y
j=j+1
}
paste(input_dir, "mcl/mcl-14-137/", sep = "")
mcl_dir = paste(input_dir, "mcl/mcl-14-137/", sep = "")
list_clusters = list()
setwd(paste(mcl_dir, "src/shmcl", sep = ""))
j = 1
i = 1
for (i in 1:length(kegg_kegg)) {
onekegg = kegg_kegg[[i]]
write.table(
x = onekegg,
paste(input_dir, "onekegg.tsv", sep = ""),
sep = " ",
col.names = FALSE,
row.names = FALSE,
quote = FALSE
)
system(paste(
"./mcl ",
input_dir,
"onekegg.tsv --abc -o ",
paste(input_dir, "group_clustered", sep = ""),
sep = ""
))
# Read in the data
x <-
scan(paste(input_dir, "group_clustered", sep = ""),
what = "",
sep = "\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
list_clusters[[j]] = y
j = j + 1
}
require(igraph)
i = 1
list_clusters = list()
j = 1
for (i in 1:length(kegg_kegg)) {
genesetd = graph_from_data_frame(kegg_kegg[[i]][1:2], directed = FALSE, vertices = NULL)
prueba = cluster_infomap(genesetd, e.weights = as.vector(unlist(kegg_kegg[[i]][3])))
# membership(prueba)
list_clusters[[j]] =  communities(prueba)
j = j + 1
}
input_dir = "/scratch/hipathway/HiPathway_Bo/" # Change to whatever are the files located
load(paste(input_dir, "data_example.RData", sep = "")) # Data example file's name is "kegg_kegg"
list_clusters = list()
j = 1
for (i in 1:length(kegg_kegg)) {
onekegg = kegg_kegg[[i]]
write.table(
x = onekegg,
paste(input_dir, "onekegg.tsv", sep = ""),
sep = " ",
col.names = FALSE,
row.names = FALSE,
quote = FALSE
)
system(
paste(
"java -jar ",
input_dir,
"mgclusjar.jar  -f " ,
input_dir,
"onekegg.tsv -w T -o ",
paste(input_dir, "group_clustered", sep = ""),
sep = ""
)
)
# Read in the data
x <-
scan(paste(input_dir, "group_clustered", sep = ""),
what = "",
sep = "\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
list_clusters[[j]] = y
j = j + 1
}
paste(input_dir, "mcl/mcl-14-137/", sep = "")
mcl_dir = paste(input_dir, "mcl/mcl-14-137/", sep = "")
list_clusters = list()
setwd(paste(mcl_dir, "src/shmcl", sep = ""))
j = 1
i = 1
for (i in 1:length(kegg_kegg)) {
onekegg = kegg_kegg[[i]]
write.table(
x = onekegg,
paste(input_dir, "onekegg.tsv", sep = ""),
sep = " ",
col.names = FALSE,
row.names = FALSE,
quote = FALSE
)
system(paste(
"./mcl ",
input_dir,
"onekegg.tsv --abc -o ",
paste(input_dir, "group_clustered", sep = ""),
sep = ""
))
# Read in the data
x <-
scan(paste(input_dir, "group_clustered", sep = ""),
what = "",
sep = "\n")
# Separate elements by one or more whitepace
y <- strsplit(x, "[[:space:]]+")
list_clusters[[j]] = y
j = j + 1
}
require(igraph)
i = 1
list_clusters = list()
j = 1
for (i in 1:length(kegg_kegg)) {
genesetd = graph_from_data_frame(kegg_kegg[[i]][1:2], directed = FALSE, vertices = NULL)
prueba = cluster_infomap(genesetd, e.weights = as.vector(unlist(kegg_kegg[[i]][3])))
# membership(prueba)
list_clusters[[j]] =  communities(prueba)
j = j + 1
}
